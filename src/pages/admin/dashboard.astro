---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { createAdminClient } from '../../server/appwrite';

const { user } = Astro.locals;
if (!user || !user.labels.includes('admin')) {
    return Astro.redirect("/");
}

const { users, databases } = createAdminClient();

const total_users = (await users.list()).total
const total_views = "N/A"
const total_pages = (await databases.listDocuments(import.meta.env.DB0_ID, 'pages')).total

const meta = await databases.getDocument(import.meta.env.DB0_ID, "meta", "ROOT")

if (Astro.request.method === "POST") {
    var data = await Astro.request.formData()

    switch (data.get("type")) {
        case "read-only":
            await databases.updateDocument(
                import.meta.env.DB0_ID,
                "meta",
                "ROOT",
                {"read_only_mode": !meta.read_only_mode, "alert_message": (!meta.read_only_mode ? "SimpleCV is currently in read-only mode. This means you can't change any of your data, but you can read it." : null)}
            )
            break;
        case "maintenance_mode":
            await databases.updateDocument(
                import.meta.env.DB0_ID,
                "meta",
                "ROOT",
                {"maintenance_mode": !meta.maintenance_mode, "alert_message": (!meta.maintenance_mode ? "SimpleCV is currently in maintenance mode. This means you cant read or change your data." : null)}
            )
            break;
        case "alert_message":
            await databases.updateDocument(
                import.meta.env.DB0_ID,
                "meta",
                "ROOT",
                {"alert_message": (data.get("alert_message") == "" ? null : data.get("alert_message"))}
            )
            break;
    }
    return Astro.redirect("/admin/dashboard")
}
---

<AdminLayout>
    <div class="flex items-center justify-center">
        <div class="grid grid-cols-2 flex-col rounded-lg shadow-md bg-base-300 border-r-base divide-x divide-base-100">
            <div class="stats stats-vertical shadow [&_*]:bg-base-300">
                <div class="stat">
                    <div class="stat-title">Users</div>
                    <div class="stat-value">{total_users}</div>
                    <div class="stat-desc">All Time</div>
                </div>
            
                <div class="stat">
                    <div class="stat-title">Views</div>
                    <div class="stat-value">{total_views}</div>
                    <div class="stat-desc">Across All Pages</div>
                </div>
            
                <div class="stat">
                    <div class="stat-title">Pages</div>
                    <div class="stat-value">{total_pages}</div>
                    <div class="stat-desc">All Time</div>
                </div>
            </div>
            <div class="px-4 py-2.5">
                <div>
                    <!-- Read-Only Mode -->
                    <div>
                        <div class="label">
                            <span class="label-text">Read-Only Mode</span>
                        </div>

                        <form method="POST">
                            <input type="hidden" name="type" id="type" value="read-only"/>
                            <button class="btn btn-primary w-full" type="submit">{meta.read_only_mode ? "Deactivate" : "Activate"}</button>
                        </form>
                    </div>
                    <!-- Maintenance Mode -->
                    <div>
                        <div class="label">
                            <span class="label-text">Maintenance Mode</span>
                        </div>

                        <form method="POST">
                            <input type="hidden" name="type" id="type" value="maintenance_mode"/>
                            <button class="btn btn-primary w-full" type="submit">{meta.maintenance_mode ? "Deactivate" : "Activate"}</button>
                        </form>
                    </div>
                    <!-- Alert Banner -->
                    <div>
                        <div class="label">
                            <span class="label-text">Alert Banner</span>
                        </div>

                        <button class="btn btn-primary w-full" onclick="alert_banner_modal.showModal()">Edit</button>

                        <dialog id="alert_banner_modal" class="modal">
                            <div class="modal-box">
                                <h3 class="text-lg font-bold">Edit Alert Banner</h3>
                                <form method="POST" class="pt-2">
                                    <input type="hidden" name="type" id="type" value="alert_message"/>
                                    <div class="pb-2">
                                        <input
                                        id="alert_message" name="alert_message" placeholder="Alert Banner" type="text" 
                                        class="input input-bordered w-full"
                                        value={meta.alert_message}
                                        />
                                    </div>
                                    <button class="btn btn-error w-full px-4 text-black rounded-md" type="submit">Save</button>
                                </form>
                            </div>
                            <form method="dialog" class="modal-backdrop">
                                <button>close</button>
                            </form>
                        </dialog>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="flex items-center justify-center pt-4">
        <div class="overflow-x-auto w-max rounded-lg shadow-md bg-base-300">
            <h1 class="bg-base-300 text-center text-2xl font-bold py-3">User Table</h1>
            <table class="table table-xs table-pin-rows table-pin-cols [&_*]:bg-base-300">
            <thead>
                <tr>
                    <th></th>
                    <td>Name</td>
                    <td>ID</td>
                    <td>Created At</td>
                    <td>Updated At</td>
                    <td>Email</td>
                    <td>Verified</td>
                    <td>Labels</td>
                    <td>Active</td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
                {users.list().then((response) => {
                    return response.users.map((user_record) => (
                        <tr>
                            <th>
                                <div class="avatar">
                                        <div class="mask mask-circle h-12 w-12">
                                            <img src={"https://cloud.appwrite.io/v1/avatars/initials?name=" + user_record.name} alt="Avatar" />
                                        </div>
                                </div>
                            </th>
                            <td>{user_record.name}</td>
                            <td>{user_record.$id}</td>
                            <td>{user_record.$createdAt}</td>
                            <td>{user_record.$updatedAt}</td>
                            <td>{user_record.email}</td>
                            <td>{user_record.emailVerification ? <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 shrink-0 stroke-current" fill="none" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /> </svg> : <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 shrink-0 stroke-current" fill="none" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /> </svg>}</td>
                            <td>{user_record.labels.length == 1 ? user_record.labels[0] : user_record.labels.map((label) => (label + ", ")) }</td>
                            <td>{user_record.status ? <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 shrink-0 stroke-current" fill="none" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /> </svg> : <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 shrink-0 stroke-current" fill="none" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /> </svg>}</td>
                            <td><a class="btn btn-primary btn-outline" href={"/admin/manage/user/" + user_record.$id}>Manage</a></td>
                        </tr>
                    ))
                })}
            </tbody>
            </table>
        </div>
    </div>
</AdminLayout>
